#! /usr/bin/python
#-*- coding: utf-8 -*-
import sys,os,argparse,shutil,glob,json,copy,time

SLOTS = ['route','from.desc','from.neighborhood','from.monument','to.desc','to.neighborhood','to.monument','date','time']

def main(argv):
    #
    # CMD LINE ARGS
    # 
    install_path = os.path.abspath(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    utils_dirname = os.path.join(install_path,'lib')
    sys.path.append(utils_dirname)
    from dataset_walker import dataset_walker
    list_dir = os.path.join(install_path,'config')

    parser = argparse.ArgumentParser(description='Simple hand-crafted dialog state tracker baseline.')
    parser.add_argument('--dataset', dest='dataset', action='store', metavar='DATASET', required=True,
                        help='The dataset to analyze, for example train1 or test2 or train3a')
    parser.add_argument('--dataroot',dest='dataroot',action='store',required=True,metavar='PATH',
                        help='Will look for corpus in <destroot>/<dataset>/...')
    parser.add_argument('--trackfile',dest='scorefile',action='store',required=True,metavar='JSON_FILE',
                        help='File to write with tracker output')
    parser.add_argument('--null',dest='null',action='store_true',
                        help='Always output "None of the above" for all slots with score 1.0')
    parser.add_argument('--ignorescores',dest='ignorescores',action='store_true',
                        help='Ignore score in data; always use a score of 1.0 (nop if --null also specified)')
    args = parser.parse_args()

    sessions = dataset_walker(args.dataset,dataroot=args.dataroot,labels=False) #dataset_walker call 부분
    start_time = time.time()
    r = {
        'sessions': [],
        'dataset': args.dataset,
        }
    
    for session in sessions:
        r['sessions'].append( { 'turns': [], 'session-id': session.log['session-id'], } ) #sessions에서 turn, session-id, log로 값 가져옴
        print r
        state = _InitState()        
        if (args.null == True):
            state['joint'] = { 'hyps': [], } #state 생성
        for turn_index,(log_turn,scratch) in enumerate(session): #가져온 세션만 반복문
            if (args.null == True):
                r['sessions'][-1]['turns'].append(state)
                continue
            # check whether to initialize state or copy
            if (log_turn['restart'] == True or turn_index == 0):#로그 재시작일경우 초기화
                state = _InitState()
            else:
                state = copy.deepcopy(state) #재시작 아닐 경우 복사하여 저장
            r['sessions'][-1]['turns'].append(state)
            if (len(log_turn['input']['live']['slu-hyps']) == 0): #인식 결과가없을 경우넘김
                # no recognition results; skip
                continue
            slu_hyp = log_turn['input']['live']['slu-hyps'][0] #로그의 첫번째것 가져옴
            joint = {}
            joint_scores = []            
            for slot in SLOTS : #전체 슬롯만큼 있는지 확인
                for act_hyp in slu_hyp['slu-hyp']: #slu-hyp 부분 확인-> act-hyp로 들어감
                    this_pairset = {}
                    for found_slot,val in act_hyp['slots']: #해당 부분에서slot값들 확인하여 found_slot, val로 대입
                        if (found_slot.startswith(slot)):
                            this_pairset[found_slot] = val #this_pairset에 대입
                    if (len(this_pairset) == 0):
                        continue
                    if (len(state[slot]['hyps']) == 0 or state[slot]['hyps'][0]['score-save'] < slu_hyp['score']):
                        score = slu_hyp['score'] if (args.ignorescores == False) else 1.0
                        state[slot]['hyps'] = [ {
                                'score-save': slu_hyp['score'],
                                'score': score,
                                'slots': this_pairset,
                                } ] #state에 score실제값, 변형된 값, this_pairset 값 저장
                if (len(state[slot]['hyps']) > 0): #각 슬롯에 hyps 값이 존재하면
                    joint_scores.append( state[slot]['hyps'][0]['score'] ) #joint_scores 추가
                    for (my_slot,my_val) in state[slot]['hyps'][0]['slots'].items():#state 에 저장된 값들을 가지고
                        joint[my_slot] = my_val
            state['joint'] = { 'hyps': [], }
            if (len(joint_scores) > 0):
                state['joint']['hyps'].append( {
                        'score': sum(joint_scores) / len(joint_scores),
                        'slots': joint,
                        } )
        for turn in r['sessions'][-1]['turns']:
            for slots_entry in turn.values():
                for hyp_entry in slots_entry['hyps']:
                    if ('score-save' in hyp_entry):
                        del hyp_entry['score-save']
    end_time = time.time()
    elapsed_time = end_time - start_time
    r['wall-time'] = elapsed_time

    f = open(args.scorefile,'w')
    json.dump(r,f,indent=2)
    f.close()

def _InitState():
    state = {}
    for slot in SLOTS:
        state[slot] = {'hyps': [], }    
    return state

if (__name__ == '__main__'):
    main(sys.argv)




